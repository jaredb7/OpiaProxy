<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * $model.description$
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 *
 */
class Leg
{

    static $swaggerTypes = array(
        'FromStopId' => 'string',
        'ToStopId' => 'string',
        'TravelMode' => 'string',
        'DistanceM' => 'int',
        'Route' => 'Route',
        'Instruction' => 'string',
        'SameVehicleContinuation' => 'bool',
        'DepartureTime' => 'DateTime',
        'ArrivalTime' => 'DateTime',
        'DurationMins' => 'int',
        'TripDetails' => 'Trip',
        'Polyline' => 'string'

    );

    /**
     * The Stop ID being travelled to by this leg. Null if the destination doesn't represent a stop, eg a customer address
     */
    public $FromStopId; // string
    /**
     * The Stop ID being travelled from by this leg. Null if the destination doesn't represent a stop, eg a customer address
     */
    public $ToStopId; // string
    /**
     * Method of transport the customer will use for this leg, eg Walk, Bus. None = 0, Bus = 2, Ferry = 4, Train = 8, Walk = 16
     */
    public $TravelMode; // string
    /**
     * Total distance of the leg, in meters
     */
    public $DistanceM; // int
    /**
     * Route the vehicle will be travelling upon. Null when Leg.TravelMode indicates a Walking leg.
     */
    public $Route; // Route
    /**
     * General instructions related to the leg, eg walk 200 meters towards xxxx
     */
    public $Instruction; // string
    /**
     * Whether this leg is actually a leg that continues upon the same vehicle
     */
    public $SameVehicleContinuation; // bool
    /**
     * When the customer needs to begin this leg of the journey
     */
    public $DepartureTime; // DateTime
    /**
     * When the customer will complete this leg of the journey
     */
    public $ArrivalTime; // DateTime
    /**
     * Amount of time this leg will take
     */
    public $DurationMins; // int
    /**
     * Details of this vehicle making this trip. Null when Leg.TravelMode indicates a Walking leg.
     */
    public $TripDetails; // Trip
    /**
     * An encoded representation of the lat/lng geo points this leg travels and the maximum zoom in which they are accurate (in Google Polyline format)
     */
    public $Polyline; // string
}